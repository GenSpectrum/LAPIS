import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.1.0'
    id 'org.jlleitschuh.gradle.ktlint' version "12.1.2"
    id 'org.springdoc.openapi-gradle-plugin' version "1.9.0"
    id 'antlr'
}

group = 'org.genspectrum'
version = '0.3.10' // x-release-please-version - this is a marker comment for Release Please to update this version

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

kotlin {
    jvmToolchain(21)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    antlr 'org.antlr:antlr4:4.13.2'
    implementation 'org.antlr:antlr4-runtime:4.13.2'
    implementation 'org.apache.commons:commons-csv:1.13.0'
    implementation 'com.github.luben:zstd-jni:1.5.6-8'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.6.1'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.mockito"
    }
    testImplementation 'com.ninja-squad:springmockk:4.0.2'
    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
}


compileKotlin {
    dependsOn generateGrammarSource
}

tasks.named('runKtlintCheckOverMainSourceSet') {
    mustRunAfter("generateGrammarSource")
}

tasks.named('compileTestKotlin') {
    mustRunAfter("generateGrammarSource")
    mustRunAfter("generateTestGrammarSource")
}

tasks.named('test') {
    dependsOn generateGrammarSource
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
    }
}

openApi {
    outputDir.set(file("$rootDir"))

    def opennessLevel = project.hasProperty("opennessLevel") ? project.opennessLevel : "open"
    def segmented = project.hasProperty("segmented") ? project.segmented : "false"

    def getCustomOutputFileName = { opennessLevel_, segmented_ ->
        if (segmented_ == "true") {
            return "lapis-openapi-multi-segmented.json"
        } else {
            return opennessLevel_ == "open" ? "lapis-openapi-single-segmented.json" : "lapis-openapi-single-segmented-protected.json"
        }
    }

    def getCustomLapisConfig = { opennessLevel_, segmented_ ->
        if (segmented_ == "true") {
            return "$rootDir/../lapis-e2e/testData/multiSegmented/testDatabaseConfig.yaml"
        } else {
            return opennessLevel_ == "open"
                    ? "$rootDir/../lapis-e2e/testData/singleSegmented/testDatabaseConfig.yaml"
                    : "$rootDir/../lapis-e2e/testData/singleSegmented/protectedTestDatabaseConfig.yaml"
        }
    }

    def getReferenceGenomeFilename = { segmented_ ->
        if (segmented_ == "true") {
            return "$rootDir/../lapis-e2e/testData/multiSegmented/reference_genomes.json"
        } else {
            return "$rootDir/../lapis-e2e/testData/singleSegmented/reference_genomes.json"
        }
    }

    def customOutputFileName = getCustomOutputFileName(opennessLevel, segmented)
    def customLapisConfig = getCustomLapisConfig(opennessLevel, segmented)
    def referenceGenomeFilename = getReferenceGenomeFilename(segmented)

    outputFileName.set(customOutputFileName)
    apiDocsUrl.set("http://localhost:8080/api-docs")

    customBootRun {
        args.set([
                "--silo.url=does.not.matter.here",
                "--lapis.databaseConfig.path=$customLapisConfig",
                "--referenceGenomeFilename=$referenceGenomeFilename",
                "--lapis.accessKeys.path=$rootDir/src/test/resources/config/testAccessKeys.yaml"
        ])
    }
}
