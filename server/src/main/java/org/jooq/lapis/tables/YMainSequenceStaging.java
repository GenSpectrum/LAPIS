/*
 * This file is generated by jOOQ.
 */
package org.jooq.lapis.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.lapis.DefaultSchema;
import org.jooq.lapis.Keys;
import org.jooq.lapis.tables.records.YMainSequenceStagingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YMainSequenceStaging extends TableImpl<YMainSequenceStagingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>y_main_sequence_staging</code>
     */
    public static final YMainSequenceStaging Y_MAIN_SEQUENCE_STAGING = new YMainSequenceStaging();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YMainSequenceStagingRecord> getRecordType() {
        return YMainSequenceStagingRecord.class;
    }

    /**
     * The column <code>y_main_sequence_staging.id</code>.
     */
    public final TableField<YMainSequenceStagingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>y_main_sequence_staging.seq_original_compressed</code>.
     */
    public final TableField<YMainSequenceStagingRecord, byte[]> SEQ_ORIGINAL_COMPRESSED = createField(DSL.name("seq_original_compressed"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.seq_aligned_compressed</code>.
     */
    public final TableField<YMainSequenceStagingRecord, byte[]> SEQ_ALIGNED_COMPRESSED = createField(DSL.name("seq_aligned_compressed"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.aa_mutations</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> AA_MUTATIONS = createField(DSL.name("aa_mutations"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.aa_unknowns</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> AA_UNKNOWNS = createField(DSL.name("aa_unknowns"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.nuc_substitutions</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> NUC_SUBSTITUTIONS = createField(DSL.name("nuc_substitutions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.nuc_deletions</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> NUC_DELETIONS = createField(DSL.name("nuc_deletions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.nuc_insertions</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> NUC_INSERTIONS = createField(DSL.name("nuc_insertions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>y_main_sequence_staging.nuc_unknowns</code>.
     */
    public final TableField<YMainSequenceStagingRecord, String> NUC_UNKNOWNS = createField(DSL.name("nuc_unknowns"), SQLDataType.CLOB, this, "");

    private YMainSequenceStaging(Name alias, Table<YMainSequenceStagingRecord> aliased) {
        this(alias, aliased, null);
    }

    private YMainSequenceStaging(Name alias, Table<YMainSequenceStagingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>y_main_sequence_staging</code> table reference
     */
    public YMainSequenceStaging(String alias) {
        this(DSL.name(alias), Y_MAIN_SEQUENCE_STAGING);
    }

    /**
     * Create an aliased <code>y_main_sequence_staging</code> table reference
     */
    public YMainSequenceStaging(Name alias) {
        this(alias, Y_MAIN_SEQUENCE_STAGING);
    }

    /**
     * Create a <code>y_main_sequence_staging</code> table reference
     */
    public YMainSequenceStaging() {
        this(DSL.name("y_main_sequence_staging"), null);
    }

    public <O extends Record> YMainSequenceStaging(Table<O> child, ForeignKey<O, YMainSequenceStagingRecord> key) {
        super(child, key, Y_MAIN_SEQUENCE_STAGING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<YMainSequenceStagingRecord> getPrimaryKey() {
        return Keys.Y_MAIN_SEQUENCE_PKEY;
    }

    @Override
    public List<UniqueKey<YMainSequenceStagingRecord>> getKeys() {
        return Arrays.<UniqueKey<YMainSequenceStagingRecord>>asList(Keys.Y_MAIN_SEQUENCE_PKEY);
    }

    @Override
    public YMainSequenceStaging as(String alias) {
        return new YMainSequenceStaging(DSL.name(alias), this);
    }

    @Override
    public YMainSequenceStaging as(Name alias) {
        return new YMainSequenceStaging(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YMainSequenceStaging rename(String name) {
        return new YMainSequenceStaging(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YMainSequenceStaging rename(Name name) {
        return new YMainSequenceStaging(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, byte[], byte[], String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
