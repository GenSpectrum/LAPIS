/*
 * This file is generated by jOOQ.
 */
package org.jooq.lapis.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.lapis.DefaultSchema;
import org.jooq.lapis.Keys;
import org.jooq.lapis.tables.records.YPangolinAssignmentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YPangolinAssignment extends TableImpl<YPangolinAssignmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>y_pangolin_assignment</code>
     */
    public static final YPangolinAssignment Y_PANGOLIN_ASSIGNMENT = new YPangolinAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YPangolinAssignmentRecord> getRecordType() {
        return YPangolinAssignmentRecord.class;
    }

    /**
     * The column <code>y_pangolin_assignment.gisaid_epi_isl</code>.
     */
    public final TableField<YPangolinAssignmentRecord, String> GISAID_EPI_ISL = createField(DSL.name("gisaid_epi_isl"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>y_pangolin_assignment.pango_lineage</code>.
     */
    public final TableField<YPangolinAssignmentRecord, String> PANGO_LINEAGE = createField(DSL.name("pango_lineage"), SQLDataType.CLOB, this, "");

    private YPangolinAssignment(Name alias, Table<YPangolinAssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private YPangolinAssignment(Name alias, Table<YPangolinAssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>y_pangolin_assignment</code> table reference
     */
    public YPangolinAssignment(String alias) {
        this(DSL.name(alias), Y_PANGOLIN_ASSIGNMENT);
    }

    /**
     * Create an aliased <code>y_pangolin_assignment</code> table reference
     */
    public YPangolinAssignment(Name alias) {
        this(alias, Y_PANGOLIN_ASSIGNMENT);
    }

    /**
     * Create a <code>y_pangolin_assignment</code> table reference
     */
    public YPangolinAssignment() {
        this(DSL.name("y_pangolin_assignment"), null);
    }

    public <O extends Record> YPangolinAssignment(Table<O> child, ForeignKey<O, YPangolinAssignmentRecord> key) {
        super(child, key, Y_PANGOLIN_ASSIGNMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<YPangolinAssignmentRecord> getPrimaryKey() {
        return Keys.Y_PANGOLIN_ASSIGNMENT_PKEY;
    }

    @Override
    public List<UniqueKey<YPangolinAssignmentRecord>> getKeys() {
        return Arrays.<UniqueKey<YPangolinAssignmentRecord>>asList(Keys.Y_PANGOLIN_ASSIGNMENT_PKEY);
    }

    @Override
    public YPangolinAssignment as(String alias) {
        return new YPangolinAssignment(DSL.name(alias), this);
    }

    @Override
    public YPangolinAssignment as(Name alias) {
        return new YPangolinAssignment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YPangolinAssignment rename(String name) {
        return new YPangolinAssignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YPangolinAssignment rename(Name name) {
        return new YPangolinAssignment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
