/*
 * This file is generated by jOOQ.
 */
package org.jooq.lapis.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.lapis.DefaultSchema;
import org.jooq.lapis.Keys;
import org.jooq.lapis.tables.records.YTreeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YTree extends TableImpl<YTreeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>y_tree</code>
     */
    public static final YTree Y_TREE = new YTree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YTreeRecord> getRecordType() {
        return YTreeRecord.class;
    }

    /**
     * The column <code>y_tree.timestamp</code>.
     */
    public final TableField<YTreeRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>y_tree.bytes</code>.
     */
    public final TableField<YTreeRecord, byte[]> BYTES = createField(DSL.name("bytes"), SQLDataType.BLOB.nullable(false), this, "");

    private YTree(Name alias, Table<YTreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private YTree(Name alias, Table<YTreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>y_tree</code> table reference
     */
    public YTree(String alias) {
        this(DSL.name(alias), Y_TREE);
    }

    /**
     * Create an aliased <code>y_tree</code> table reference
     */
    public YTree(Name alias) {
        this(alias, Y_TREE);
    }

    /**
     * Create a <code>y_tree</code> table reference
     */
    public YTree() {
        this(DSL.name("y_tree"), null);
    }

    public <O extends Record> YTree(Table<O> child, ForeignKey<O, YTreeRecord> key) {
        super(child, key, Y_TREE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<YTreeRecord> getPrimaryKey() {
        return Keys.Y_TREE_PKEY;
    }

    @Override
    public List<UniqueKey<YTreeRecord>> getKeys() {
        return Arrays.<UniqueKey<YTreeRecord>>asList(Keys.Y_TREE_PKEY);
    }

    @Override
    public YTree as(String alias) {
        return new YTree(DSL.name(alias), this);
    }

    @Override
    public YTree as(Name alias) {
        return new YTree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YTree rename(String name) {
        return new YTree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YTree rename(Name name) {
        return new YTree(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
