name: Release LAPIS 2

on:
  push:
  workflow_run:
    workflows: [LAPIS v2]
    types: [completed]
    branches: [main]

env:
  LAPIS_DOCKER_IMAGE_NAME: ghcr.io/genspectrum/lapis-v2
  DOCS_DOCKER_IMAGE_NAME: ghcr.io/genspectrum/lapis-v2-docs

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
      checks: read
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          path: .
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          include-component-in-tag: true
          target-branch: main

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created }}

      - name: Set up Docker Buildx
        if: ${{ steps.release.outputs.release_created }}
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ steps.release.outputs.release_created }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Backend Docker Image
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: Build Docs Docker Image And Run E2E Tests
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag Already Built Image With Release Tags
        if: ${{ steps.release.outputs.release_created }}
        run: |
          MAJOR=${{ steps.release.outputs.major }}
          MINOR=${{ steps.release.outputs.minor }}
          PATCH=${{ steps.release.outputs.patch }}
          TAGS=("$MAJOR.$MINOR" "$MAJOR.$MINOR.$PATCH")
          # TAGS=("$MAJOR" "$MAJOR.$MINOR" "$MAJOR.$MINOR.$PATCH") - don't include major-only for pre-1.0
          IMAGES=("${{ env.LAPIS_DOCKER_IMAGE_NAME }}" "${{ env.DOCS_DOCKER_IMAGE_NAME }}")
          
          for IMAGE in "${IMAGES[@]}"; do
            for TAG in "${TAGS[@]}"; do
              docker buildx imagetools create --tag $IMAGE:$TAG $IMAGE:latest
            done
          done
