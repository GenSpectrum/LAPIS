import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
    id 'org.jlleitschuh.gradle.ktlint' version "11.4.0"
    id 'org.springdoc.openapi-gradle-plugin' version "1.6.0"
    id 'antlr'
}

group = 'org.genspectrum'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    antlr 'org.antlr:antlr4:4.13.0'
    implementation 'org.antlr:antlr4-runtime:4.13.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.mockito"
    }
    testImplementation 'com.ninja-squad:springmockk:4.0.2'
    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}


compileKotlin {
    dependsOn generateGrammarSource
    compilerOptions {
        freeCompilerArgs.add("-Xexport-kdoc")
        jvmTarget.set(JvmTarget.JVM_19)
    }
}

tasks.named('runKtlintCheckOverMainSourceSet') {
    mustRunAfter("generateGrammarSource")
}

tasks.named('compileTestKotlin') {
    mustRunAfter("generateGrammarSource")
    mustRunAfter("generateTestGrammarSource")
}

tasks.named('test') {
    dependsOn generateGrammarSource
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
    }
}

tasks.named('bootBuildImage') {
    environment = ["BP_JVM_VERSION": "20"]
    imageName = "ghcr.io/genspectrum/${project.name}"
}

openApi {
    outputDir.set(file("$rootDir"))
    outputFileName.set("lapis-v2-openapi.json")
    apiDocsUrl.set("http://localhost:8080/api-docs")
    customBootRun {
        args.set([
            "--silo.url=does.not.matter.here",
            "--lapis.databaseConfig.path=../siloLapisTests/testDatabaseConfig.yaml"
        ])
    }
}
