import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
    id 'org.jlleitschuh.gradle.ktlint' version "12.1.0"
    id 'org.springdoc.openapi-gradle-plugin' version "1.8.0"
    id 'antlr'
}

group = 'org.genspectrum'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

kotlin {
    jvmToolchain(21)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    antlr 'org.antlr:antlr4:4.13.1'
    implementation 'org.antlr:antlr4-runtime:4.13.1'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation 'com.github.luben:zstd-jni:1.5.5-11'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.mockito"
    }
    testImplementation 'com.ninja-squad:springmockk:4.0.2'
    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}


compileKotlin {
    dependsOn generateGrammarSource
}

tasks.named('runKtlintCheckOverMainSourceSet') {
    mustRunAfter("generateGrammarSource")
}

tasks.named('compileTestKotlin') {
    mustRunAfter("generateGrammarSource")
    mustRunAfter("generateTestGrammarSource")
}

tasks.named('test') {
    dependsOn generateGrammarSource
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
    }
}

tasks.named('bootBuildImage') {
    environment["BP_JVM_VERSION"] = "21"
    environment["BPE_SPRING_PROFILES_ACTIVE"] = "docker"
    environment["BPE_LAPIS_REFERENCE_GENOME_FILENAME"] = "./reference_genomes.json"
    imageName = "ghcr.io/genspectrum/${project.name}"
}

openApi {
    outputDir.set(file("$rootDir"))

    def opennessLevel = project.hasProperty("opennessLevel") ? project.opennessLevel : "open"

    def customOutputFileName = opennessLevel == "open" ? "lapis-v2-openapi.json" : "lapis-v2-openapi-protected.json"
    def customLapisConfig = opennessLevel == "open" ? "../siloLapisTests/testData/testDatabaseConfig.yaml" : "../siloLapisTests/testData/protectedTestDatabaseConfig.yaml"

    outputFileName.set(customOutputFileName)
    apiDocsUrl.set("http://localhost:8080/api-docs")

    customBootRun {
        args.set([
                "--silo.url=does.not.matter.here",
                "--lapis.databaseConfig.path=$customLapisConfig",
                "--referenceGenomeFilename=../siloLapisTests/testData/reference_genomes.json",
                "--lapis.accessKeys.path=./src/test/resources/config/testAccessKeys.yaml"
        ])
    }
}
